// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract BlueBirdX is ERC20, Ownable, ReentrancyGuard {
    using SafeMath for uint256;

    address public developmentFund;
    address public liquidityPool;
    uint256 public miningRate;
    uint256 public currentMiningRate = 100;
    uint256 public liquidityPoolRate = 3000;
    uint256 public developmentFundRate = 1500;
    uint256 public teamAdvisorsRate = 500;
    uint256 public deploymentTime;
    uint256 public constant MAX_SUPPLY = 1_000_000_000 * 10**18;
    uint256 public totalMinedSupply;
    uint256 public remainingSupply = MAX_SUPPLY;
    uint256 public targetMinedSupply;
    uint256 public constant SUPPLY_REDUCTION_PERCENTAGE = 10;
    uint256 public constant MAX_ALLOWED_BALANCE_PERCENTAGE = 50; // 0.5%
    uint256 public constant TRANSFER_LIMIT = 10; // 0.1% of total BBX supply
    uint256 public SLIDING_TRANSFER_FEE_THRESHOLD = 1; // 0.01% of total supply

    uint256 public transferFeeRate = 1; // 0.1% of the amount
    uint256 public developmentFundFeeRate = 1; // 0.01% of the amount

    mapping(address => bool) public isExcludedFromMaxBalance;
    mapping(address => bool) public isExcludedFromTransferFee;
    mapping(address => uint256) private lastRewardClaim;
    mapping(address => bool) private blacklistedAddresses;

    struct Allocation {
        uint256 amount;
        uint256 claimed;
        uint256 lastClaim;
    }

    mapping(address => Allocation) public teamAdvisorAllocations;

    event RewardClaimed(address indexed user, uint256 amount);
    event TokenTransferred(address indexed sender, address indexed recipient, uint256 amount);
    event TokenTransacted(address indexed sender, address indexed recipient, uint256 tokenAmount, uint256 rewardAmount);
    event TeamAdvisorDistributionClaimed(address indexed teamAdvisor, uint256 amount);

    uint256 public constant INITIAL_LOCK_PERIOD = 365 days;
    uint256 public constant QUARTER = 91 days;

    mapping(address => bool) public eligibleTokens;
    mapping(address => uint256) public tokenMiningRates;
    address[] public eligibleTokenAddresses; // array to keep track of eligible tokens

    constructor(
        address _developmentFund,
        address _liquidityPool,
        address[] memory teamAdvisors,
        uint256[] memory _teamAdvisorAllocationAmounts
    ) ERC20("BlueBirdX", "BRD") {
        require(_developmentFund != address(0), "Development fund address cannot be zero address");
        require(_liquidityPool != address(0), "Liquidity pool address cannot be zero address");

        developmentFund = _developmentFund;
        liquidityPool = _liquidityPool;
        miningRate = 50;
        deploymentTime = block.timestamp;

        // Mint tokens for the liquidity pool, development fund, and team andadvisors
        uint256 liquidityPoolTokens = (MAX_SUPPLY * liquidityPoolRate) / 10000;
        uint256 developmentFundTokens = (MAX_SUPPLY * developmentFundRate) / 10000;
        uint256 teamAdvisorsTotalTokens = (MAX_SUPPLY * teamAdvisorsRate) / 10000;

        _mint(liquidityPool, liquidityPoolTokens);
        _mint(developmentFund, developmentFundTokens);
        uint256 teamAdvisorsAllocatedTokens = 0;

        // Assign allocations to team and advisors and mint tokens
        for (uint256 i = 0; i < teamAdvisors.length; i++) {
            Allocation memory allocation;
            allocation.amount = _teamAdvisorAllocationAmounts[i];
            allocation.claimed = 0;
            allocation.lastClaim = block.timestamp + INITIAL_LOCK_PERIOD;
            teamAdvisorAllocations[teamAdvisors[i]] = allocation;

            // Mint tokens for the team advisors
            _mint(teamAdvisors[i], _teamAdvisorAllocationAmounts[i]);

            teamAdvisorsAllocatedTokens += _teamAdvisorAllocationAmounts[i];
        }

        // Ensure that the total tokens minted for team advisors do not exceed the specified percentage
        require(
            teamAdvisorsAllocatedTokens == teamAdvisorsTotalTokens,
            "Allocations do not match total tokens for team and advisors"
        );

        // Exclude development fund, liquidity pool, and team advisor wallets from the maximum allowed balance
        isExcludedFromMaxBalance[developmentFund] = true;
        isExcludedFromMaxBalance[liquidityPool] = true;
        for (uint256 i = 0; i < teamAdvisors.length; i++) {
            isExcludedFromMaxBalance[teamAdvisors[i]] = true;
        }
    }

    function _transfer(address sender, address recipient, uint256 amount) internal override {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        uint256 maxAllowedBalance = (MAX_SUPPLY * MAX_ALLOWED_BALANCE_PERCENTAGE) / 10000;
        if (!isExcludedFromMaxBalance[recipient]) {
            require(
                balanceOf(recipient) + amount <= maxAllowedBalance,
                "Recipient's balance exceeds the maximum allowed"
            );
        }

        // Calculate the regular transfer fee
        uint256 transferFee = (amount * transferFeeRate) / 1000; // 0.1% of the amount
        uint256 developmentFundFee = (amount * developmentFundFeeRate) / 10000; // 0.01% of the amount

        // Calculate the sliding transfer fee if the amount exceeds the threshold
        uint256 slidingTransferFee = 0;
        if (amount > (MAX_SUPPLY * TRANSFER_LIMIT) / 10000 || amount > (MAX_SUPPLY * SLIDING_TRANSFER_FEE_THRESHOLD) / 10000) {
            slidingTransferFee = (amount * SUPPLY_REDUCTION_PERCENTAGE) / 100;
        }

        // Update balances
        super._transfer(sender, recipient, amount - transferFee - developmentFundFee - slidingTransferFee);
        super._transfer(sender, liquidityPool, transferFee + slidingTransferFee / 2);
        super._transfer(sender, developmentFund, developmentFundFee + slidingTransferFee / 2);

        emit Transfer(sender, recipient, amount - transferFee - developmentFundFee - slidingTransferFee);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        // Calculate the regular transfer fee
        uint256 transferFee = (amount * transferFeeRate) / 1000; // 0.1% of the amount
        uint256 developmentFundFee = (amount * developmentFundFeeRate) / 10000; // 0.01% of the amount

        // Calculate the total fee
        uint256 totalFee = transferFee + developmentFundFee;

        // Ensure the sender has enough balance to cover the amount and the fees
        require(balanceOf(msg.sender) >= amount, "Insufficient balance to cover amount and fees");

        // Deduct the transfer amount and fees from the sender's balance
        super._transfer(msg.sender, recipient, amount - totalFee);
        super._transfer(msg.sender, liquidityPool, transferFee);
        super._transfer(msg.sender, developmentFund, developmentFundFee);

        emit Transfer(msg.sender, recipient, amount - totalFee);
        emit TokenTransferred(msg.sender, recipient, amount - totalFee);

        return true;
    }

    function addEligibleToken(address tokenAddress, uint256 newMiningRate) public onlyOwner {
        require(tokenAddress != address(0), "Token address cannot be zero address");
        require(!eligibleTokens[tokenAddress], "Token is already eligible for mining rewards");

        eligibleTokens[tokenAddress] = true;
        tokenMiningRates[tokenAddress] = newMiningRate;
        eligibleTokenAddresses.push(tokenAddress); // Add token to the list of eligible tokens
    }

    function removeEligibleToken(address tokenAddress) external onlyOwner {
        require(eligibleTokens[tokenAddress], "Token is not eligible for mining rewards");
        eligibleTokens[tokenAddress] = false;
        // Remove token from the list of eligible tokens
        for (uint256 i = 0; i < eligibleTokenAddresses.length; i++) {
            if (eligibleTokenAddresses[i] == tokenAddress) {
                eligibleTokenAddresses[i] = eligibleTokenAddresses[eligibleTokenAddresses.length - 1];
                eligibleTokenAddresses.pop();
                break;
            }
        }
    }

    function transactTokens(address tokenAddress, address recipient, uint256 amount) external nonReentrant {
        require(eligibleTokens[tokenAddress], "Token is not eligible for mining rewards");

        // Calculate the regular transfer fee
        uint256 transferFee = (amount * transferFeeRate) / 1000; // 0.1% of the amount
        uint256 developmentFundFee = (amount * developmentFundFeeRate) / 10000; // 0.01% of the amount

        // Calculate the total fee
        uint256 totalFee = transferFee + developmentFundFee;

        // Ensure the sender has enough balance to cover the amount and the fees
        require(
            IERC20(tokenAddress).balanceOf(msg.sender) >= amount,
            "Insufficient balance to cover amount and fees"
        );

        // Transfer the amount minus the fees from the sender to the recipient
        IERC20(tokenAddress).transferFrom(msg.sender, recipient, amount - totalFee);

        // Transfer the fees from the sender to the liquidity pool and the development fund
        IERC20(tokenAddress).transferFrom(msg.sender, liquidityPool, transferFee);
        IERC20(tokenAddress).transferFrom(msg.sender, developmentFund, developmentFundFee);

        // Calculate the reward based on the mining rate
        uint256 rewardAmount = (amount * currentMiningRate) / 10000;

        // Ensure the reward does not exceed the remaining supply
require(remainingSupply >= rewardAmount, "Not enough remaining supply for reward");

        // Update the total mined supply and the remaining supply
        totalMinedSupply += rewardAmount;
        remainingSupply -= rewardAmount;

        // Check if the total mined supply has reached a 10% milestone of the remaining supply
        if (totalMinedSupply >= remainingSupply / 10) {
            // Reduce the mining rate by 10%
            currentMiningRate = (currentMiningRate * 90) / 100;
        }

        // Mint the reward tokens for the sender
        _mint(msg.sender, rewardAmount);

        emit RewardClaimed(msg.sender, rewardAmount);
        emit TokenTransacted(msg.sender, recipient, amount - totalFee, rewardAmount);
    }

    function claimTeamAdvisorDistribution() external nonReentrant {
        Allocation storage allocation = teamAdvisorAllocations[msg.sender];
        require(allocation.amount > 0, "No allocation for this address");
        require(block.timestamp >= allocation.lastClaim + QUARTER, "Claim period has not passed yet");

        uint256 claimableAmount = (allocation.amount * 25) / 100; // 25% of the allocation
        require(claimableAmount > 0, "No claimable amount");

        // Update the claimed amount and the last claim time
        allocation.claimed += claimableAmount;
        allocation.lastClaim = block.timestamp;

        // Mint the claimable tokens for the team advisor
        _mint(msg.sender, claimableAmount);

        emit TeamAdvisorDistributionClaimed(msg.sender, claimableAmount);
    }

    function claimReward() public nonReentrant {
        require(block.timestamp > lastRewardClaim[msg.sender] + 1 days, "Claim is only possible once every 24 hours");
        require(balanceOf(msg.sender) > 0, "No tokens to claim rewards for");
        require(!blacklistedAddresses[msg.sender], "Address is blacklisted from claiming rewards");

        uint256 reward = balanceOf(msg.sender) / 1000; // 0.1% of the token balance
        require(remainingSupply >= reward, "Not enough remaining supply for reward");

        // Update the total mined supply and the remaining supply
        totalMinedSupply += reward;
        remainingSupply -= reward;

        // Update the last claim time
        lastRewardClaim[msg.sender] = block.timestamp;

        // Mint the reward tokens for the sender
        _mint(msg.sender, reward);

        emit RewardClaimed(msg.sender, reward);
    }

    function blacklistAddress(address account) public onlyOwner {
        require(account != address(0), "Cannot blacklist zero address");
        require(!blacklistedAddresses[account], "Address is already blacklisted");

        blacklistedAddresses[account] = true;
    }

    function removeAddressFromBlacklist(address account) public onlyOwner {
        require(account != address(0), "Cannot remove zero address from blacklist");
        require(blacklistedAddresses[account], "Address is not blacklisted");

        blacklistedAddresses[account] = false;
    }
}
